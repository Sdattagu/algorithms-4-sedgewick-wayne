**

the largest item in a heap must appear in position 1,
second largest must be in position 2 | position 3.

Give list of positions in a heap of size 31, where
the 'kth' largest
    (1) CAN appear, and
    (2) CANNOT appear, for;
k = 2, 3, 4 (assuming values to be distinct.)

**

                                                     1
                                 2                                  3
                        4                  5                  6                   7
                   8        9         10       11        12        13        14         15
                16   17   18  19    20   21  22   23    24  25    26  27    28  29    30    31

for:
    k=2 (second largest in 31 node heap):
        (1) can appear in positions:
            {2 | 3}
        (2) cannot appear in positions:
            {1 | 4-31}
    k=3 (third largest in 31 node heap):
        (1) can appear in positions:
            if 2nd largest in pos2:
                {3 | 4-5}
            if 2nd largest in pos3:
                {2 | 6-7}
        (2) cannot appear in positions:
            {1 | 8-31}
    k=4 (fourth largest in 31 node heap):
        (1) can appear in positions:
            if 3rd largest in pos2:
                {3 | 4-5}
            if 3rd largest in pos3:
                {2 | 6-7}
            if 3rd largest in pos4:
                {5 | 8-9}
            if 3rd largest in pos5:
                {4 | 10-11}
            if 3rd largest in pos6:
                {7 | 12-13}
            if 3rd largest in pos7:
                {6 | 14-15}
        (3) cannot appear in positions:
            {1 | 16-31}

